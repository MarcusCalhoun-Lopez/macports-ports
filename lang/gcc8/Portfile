# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem                              1.0
PortGroup           gcc_build           1.0
PortGroup           xcode_workaround    1.0

epoch               5
name                gcc8
version             8.5.0
revision            2
subport             libgcc8 { revision 1 }
platforms           {darwin >= 10 < 15}

checksums           rmd160  e7f3dedec67864006bf9f7e358817ce713b4476e \
                    sha256  d308841a511bb830a6100397b0042db24ce11f642dab6ea6ee44842e5325ed50 \
                    size    63841008

patchfiles          patch-fix-libgccjit-soname

if { ${os.major} > 19 } {
    # https://trac.macports.org/ticket/60908
    # Patch for macOS 11 (Darwin20) version numbering taken from
    # https://github.com/iains/gcc-darwin-arm64/commit/556ab512
    patchfiles-append         big-sur-version-fix.diff
    # Build doesn't understand a 11.0 deployment target so force to 10.16
    macosx_deployment_target  10.16
    # Fix detection of sanitizer support
    # https://trac.macports.org/ticket/61494
    patchfiles-append         fix-sanitisers-darwin20.diff
}

if { ${configure.build_arch} eq "i386" && ${os.major} >= 10 } {

    # fix no-pie clang bug bootstrapping gcc on i386
    # https://trac.macports.org/ticket/63161
    patchfiles-append  patch-gcc10-i686-clang-bootstrap-fix.diff
}

platform darwin {
    configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
}

# on 10.6.8 building with the system gcc compilers leads to
# bootstrap comparison failures
platform darwin 10 {
    compiler.blacklist-append *gcc-3.* *gcc-4.*
}

if { ${os.platform} eq "darwin" } {
    if { [vercmp ${xcodeversion} >= 12.5] || [vercmp ${xcodecltversion} >= 12.5]} {
        pre-configure {
            ui_warn "Applying '--without-build-config' workaround to Xcode ${xcodeversion} / CLT ${xcodecltversion}"
            ui_warn "If versions > 12.5 please check if it is still required"
        }
        # gcc has build issues on macOS 11.3 with the use of Xcode clang via cctools for ld
        # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100340
        # https://trac.macports.org/ticket/62775
        configure.args-append  --without-build-config
    }
}

# http://trac.macports.org/ticket/29067
compiler.blacklist-append gcc-4.0

# http://trac.macports.org/ticket/29104
compiler.blacklist-append {llvm-gcc-4.2 < 2336.1}

# https://trac.macports.org/ticket/47996
compiler.blacklist-append {clang < 300}

# "-stdlib" would be passed on to the bootstrap compiler if present
configure.cxx_stdlib

use_parallel_build  yes

# On Darwin19+ fails to build for Xcode < 11.3
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90835
# https://trac.macports.org/ticket/59351
# for more background on the issue.
if { ${os.major} >= 19 } {
    if {[vercmp ${xcodeversion} < 11.3]} {
        known_fail  yes
        pre-fetch {
            ui_error "${name} ${version} is (currently) not supported on Darwin ${os.major} Xcode ${xcodeversion}"
            ui_error "See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90835 and"
            ui_error "    https://trac.macports.org/ticket/59351 for more details"
            ui_error "To install this port upgrade Xcode to 11.3 or newer"
            return -code error "incompatible Xcode version"
        }
    }
}

# gcc cannot build if libunwind-headers is active
conflicts_build-append libunwind-headers

if {${subport} eq "libgcc8"} {

        # gcc8 runtime versions are identical to that in gcc9, so libgcc8 does not
        # need to provide anything, hence do not build anything.
        # port still defined as needed to satisfy dependency tree

        fetch.type    none
        build         { }
        use_configure no
        patchfiles

        destroot {
            set doc_dir ${destroot}${prefix}/share/doc/${subport}
            xinstall -m 755 -d ${doc_dir}
            system "echo ${subport} provides no runtime > ${doc_dir}/README"
        }

}

platform powerpc {
    configure.universal_archs ppc ppc64
}
platform i386 {
    configure.universal_archs i386 x86_64
}
configure.cc-append [get_canonical_archflags]
configure.cc_archflags
configure.cxx-append ${configure.cxx_archflags}
configure.cxx_archflags
configure.objc_archflags
configure.ld_archflags
configure.universal_cflags
configure.universal_cxxflags
configure.universal_ldflags
configure.universal_args
