# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem                              1.0
PortGroup           gcc_build           1.0
PortGroup           xcode_workaround    1.0

name                gcc7
epoch               3
version             7.5.0
revision            4
subport             libgcc7 { revision 1 }
platforms           {darwin < 15}

checksums           rmd160  91d46ec088badec75f41a2ad2a0ba228a6715107 \
                    sha256  b81946e7f01f90528a1f7352ab08cc602b9ccc05d4e44da4bd501c5a189ee661 \
                    size    62783088

if { ${configure.build_arch} eq "i386" && ${os.major} >= 10 } {

    # fix no-pie clang bug bootstrapping gcc on i386
    # https://trac.macports.org/ticket/63161
    patchfiles-append  patch-gcc7-i686-clang-bootstrap-fix.diff
}

# Work around parallel building issue on APFS
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81797
patchfiles-append   notparallel-install-headers.patch

platform darwin {
    configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
}

platform darwin 8 i386 {
    patchfiles-append patch-gcc7-tiger-intel.diff
}

configure.env-append \
                    AR_FOR_TARGET=${prefix}/bin/ar \
                    AS_FOR_TARGET=${prefix}/bin/as \
                    LD_FOR_TARGET=${prefix}/bin/ld \
                    NM_FOR_TARGET=${prefix}/bin/nm \
                    OBJDUMP_FOR_TARGET=${prefix}/bin/objdump \
                    RANLIB_FOR_TARGET=${prefix}/bin/ranlib \
                    STRIP_FOR_TARGET=${prefix}/bin/strip \
                    OTOOL=${prefix}/bin/otool \
                    OTOOL64=${prefix}/bin/otool

# gcc cannot build if libunwind-headers is active
conflicts_build-append libunwind-headers

# http://trac.macports.org/ticket/29067
compiler.blacklist-append gcc-4.0

# http://trac.macports.org/ticket/29104
compiler.blacklist-append {llvm-gcc-4.2 < 2336.1}

# https://trac.macports.org/ticket/47996
compiler.blacklist-append {clang < 300}

# "-stdlib" would be passed on to the bootstrap compiler if present
configure.cxx_stdlib

use_parallel_build  yes

if {${subport} eq "libgcc7"} {

    # If providing the primary runtime, add conflict against libgcc-devel
    if { ${libgcc.is_full} } {
        conflicts libgcc-devel
    }

    # Activate hack for new libgcc
    # https://trac.macports.org/wiki/PortfileRecipes#deactivatehack
    pre-activate {
        if {![catch {set installed [lindex [registry_active libgcc] 0]}]} {
            # Extract the epoch of the installed libgcc
            set _epoch [lindex $installed 5]
            # If < 3 need to deactivate
            if {[vercmp $_epoch 3] < 0} {
                registry_deactivate_composite libgcc "" [list ports_nodepcheck 1]
            }
        }
    }

    # http://trac.macports.org/ticket/35770
    # http://trac.macports.org/ticket/38814
    # While there can be multiple versions of these runtimes in a single
    # process, it is not possible to pass objects between different versions,
    # so we simplify this by having the libgcc port provide the newest version
    # of these runtimes for all versions of gcc to use.
    #
    # If there is a binary incompatible change to the runtime in a future
    # version of gcc, then the latest version of gcc to provide a given ABI
    # version should continue to provide a subport for that and older gcc
    # versions.

    if { ${libgcc.is_full} } {
        depends_lib      port:zlib
    } else {
        libgcc.keep      libgfortran.4.dylib libasan.4.dylib libubsan.0.dylib libcilkrts.5.dylib
    }
} else {

    select.group        gcc
    select.file         ${filespath}/mp-${name}

}

platform powerpc {
    configure.universal_archs ppc ppc64
}
platform i386 {
    configure.universal_archs i386 x86_64
}
# the generated compiler doesn't accept -arch
configure.env-append \
    "CPP=${configure.cc} -E" \
    "CXXCPP=${configure.cxx} -E"
build.env-append \
    "CPP=${configure.cc} -E" \
    "CXXCPP=${configure.cxx} -E"

# gcc default optflags are required to build gcc7 with older compilers
# see https://trac.macports.org/ticket/59706
# we probably also want to clear out the rest of the configure.XYZ flags
configure.optflags

configure.cc-append [get_canonical_archflags]
configure.cc_archflags
configure.cxx-append ${configure.cxx_archflags}
configure.cxx_archflags
configure.objc_archflags
configure.ld_archflags
configure.universal_cflags
configure.universal_cxxflags
configure.universal_ldflags
configure.universal_args
