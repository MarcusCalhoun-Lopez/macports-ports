# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem                              1.0
PortGroup           gcc_build           1.0

name                gcc45
# Whenever this port is bumped for version/revision, please revbump dragonegg-3.4-gcc-4.5
epoch               1
version             4.5.4
revision            17
subport             libgcc45 { revision 16 }
platforms           darwin

set dcore           gcc-core-${version}.tar.bz2
set dfort           gcc-fortran-${version}.tar.bz2
set dcxx            gcc-g++-${version}.tar.bz2
set djava           gcc-java-${version}.tar.bz2
set dobjc           gcc-objc-${version}.tar.bz2

set ecj             ecj-4.5.jar

gcc.tag             :gcc
master_sites-append ftp://sourceware.org/pub/java/:ecj \
                    http://mirrors.kernel.org/sources.redhat.com/java/:ecj \
                    https://www.mirrorservice.org/sites/sources.redhat.com/pub/java/:ecj \
                    http://ftp-stud.fht-esslingen.de/pub/Mirrors/sourceware.org/java/:ecj

distfiles           ${dcore}:gcc ${dfort}:gcc ${dcxx}:gcc ${djava}:gcc ${dobjc}:gcc ${ecj}:ecj
extract.only        ${dcore} ${dfort} ${dcxx} ${djava} ${dobjc}

checksums           gcc-core-${version}.tar.bz2 \
                    rmd160  558a68fad29011b8ba04e1c103eb204bd1e54d5a \
                    sha256  894d90f72cbfc8707e330fa2b1847c443fa97cf9b7f26e86be554709510e624a \
                    size    28265185 \
                    gcc-fortran-${version}.tar.bz2 \
                    rmd160  98a4a816e8f0ec8f3081d99af5460fe1afea6ade \
                    sha256  cf0803b4f5334a526dd8da1b2171d6724f50c17346b2d5c509b6abc973d2ef34 \
                    size    1517708 \
                    gcc-g++-${version}.tar.bz2 \
                    rmd160  9003882b806822ea7c5c114d060904464c07ca7a \
                    sha256  f7e3bab5e22713fbce46c2acb35fb727748473a34a942ce00393d75e1b09b6b9 \
                    size    6477571 \
                    gcc-java-${version}.tar.bz2 \
                    rmd160  719bfe5fd93542e7e3907cce23362c52eef9009c \
                    sha256  c98398da6f8c4c7d1758e291089d99853fdd27112cd3f146b7a8c26e6d762a23 \
                    size    18535957 \
                    gcc-objc-${version}.tar.bz2 \
                    rmd160  6c5bf2b75cb61105bfa3fd4c0d2462871c687495 \
                    sha256  92e7f8894a2f372a77d30732831c366289cea74f2a56c53cfec9de2ace413c92 \
                    size    238729 \
                    ecj-4.5.jar \
                    rmd160  d3f4da657f086b6423f74e93f001132f4855368a \
                    sha256  98fd128f1d374d9e42fd9d4836bdd249c6d511ebc6c0df17fbc1b9df96c3d781 \
                    size    1470676

patchfiles          ppc_fde_encoding.diff \
                    texinfo5.patch \
                    patch-gcc-texi.diff

# Handle OS X deployment targets correctly (GCC PR target/63810
# <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63810>).
patchfiles-append   macosx-version-min.patch

# Don't link with "-flat_namespace -undefined suppress" on Yosemite and
# later (#45483).
patchfiles-append   yosemite-libtool.patch

if { ${configure.build_arch} ne "i386" } {
    # TODO: most other GCC ports apply this to all architectures
    gcc.macports_exports-delete DISABLE_MACPORTS_AS_CLANG_SEARCH=1 \
                                DISABLE_XCODE_AS_CLANG_SEARCH=1
}

worksrcdir          gcc-${version}

post-extract {
    copy ${distpath}/${ecj} ${worksrcpath}/ecj.jar
}

platform darwin {
    configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
}

if {${os.platform} eq "darwin" && ([vercmp $xcodeversion 9.0] > 0)} {
    known_fail      yes
    depends_build
    depends_lib
    depends_run
    archive_sites
    pre-fetch {
        ui_error "building ${name} is not supported with Xcode 9 or greater"
        return -code error {unsupported platform}
    }
}

# http://trac.macports.org/ticket/29067
compiler.blacklist-append gcc-4.0

# http://trac.macports.org/ticket/29104
compiler.blacklist-append {llvm-gcc-4.2 < 2336.1}

if {![variant_isset universal] && ${configure.build_arch} eq "x86_64"} {
    # LTO doesn't work for most targets
    # see https://trac.macports.org/ticket/32863
    configure.args-append --enable-lto
}

platform darwin 8 {
    # see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=45248
    configure.args-append --with-dwarf2
}

if { ([variant_isset universal] && "ppc" ni ${configure.universal_archs} || "ppc64" ni ${configure.universal_archs})
     ||
     (![variant_isset universal] && "ppc" ne ${configure.build_arch} && "ppc64" ne ${configure.build_arch})
 } {
    # TODO: remove entirely?
    # this is the only GCC port to use this configuration argument
    # see https://github.com/macports/macports-ports/commit/95e18abb592e2abab10556326ae51e455608045b
    # see https://trac.macports.org/ticket/39655
    configure.args-append   --enable-plugin
}

# "-stdlib" would be passed on to the bootstrap compiler if present
configure.cxx_stdlib

use_parallel_build  yes

if {${subport} eq "libgcc45"} {
    foreach arch {arm64 x86_64 i386 ppc ppc64} {
        gcc.languages.${arch} c c++ objc obj-c++
    }

    libgcc.keep libobjc-gnu.2.dylib

    # TODO: this is the only GCC port that adds to `libgcc.strip`
    libgcc.strip-append libobjc-gnu.2.dylib
} else {

post-destroot {
    # install/copy ffitarget.h only if we have it
    if {![catch {set ffitarget.h [glob ${destroot}${prefix}/lib/${name}/gcc/*/${version}/include/ffitarget.h]} result]} {
        file copy ${ffitarget.h} ${destroot}${prefix}/include/${name}/
    }
    file rename ${destroot}${prefix}/share/python/aotcompile.py \
                ${destroot}${prefix}/share/python/aotcompile-45.py
    file rename ${destroot}${prefix}/share/python/classfile.py \
                ${destroot}${prefix}/share/python/classfile-45.py

    # darwin-sections.def gets missed on install for some reason
    if {${os.arch} ne "powerpc"} {
        file copy ${worksrcpath}/../gcc-${version}/gcc/config/darwin-sections.def {*}[glob ${destroot}${prefix}/lib/${name}/gcc/*/${version}/plugin/include/config]
    }
}

select.group        gcc
select.file         ${filespath}/mp-${name}

}

platform powerpc {
    configure.universal_archs ppc ppc64
}

platform i386 {
    configure.universal_archs i386 x86_64
}
# the generated compiler doesn't accept -arch
configure.env-append \
    "CPP=${configure.cc} -E" \
    "CXXCPP=${configure.cxx} -E"
build.env-append \
    "CPP=${configure.cc} -E" \
    "CXXCPP=${configure.cxx} -E"
configure.cc-append [get_canonical_archflags]
configure.cc_archflags
configure.cxx_archflags
configure.objc_archflags
configure.ld_archflags
configure.universal_cflags
configure.universal_cxxflags
configure.universal_ldflags
configure.universal_args
