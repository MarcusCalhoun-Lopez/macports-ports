# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem                              1.0
PortGroup           gcc_build           1.0
PortGroup           xcode_workaround    1.0

epoch               3
name                gcc9
version             9.5.0
revision            1
subport             libgcc9 { revision 2 }
platforms           {darwin >= 10 < 15}

checksums           rmd160  2ba36108599ceee93931722d98e0d5280037b05c \
                    sha256  27769f64ef1d4cd5e2be8682c0c93f9887983e6cfd1a927ce5a0a2915a95cf8f \
                    size    72462752

patchfiles          patch-fix-libgccjit-soname

patchfiles-append   patch-darwin21-support.diff

if { ${os.platform} eq "darwin" && ${os.major} > 19 } {
    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92061
    patchfiles-append patch-genconditions.diff
}

if { ${configure.build_arch} eq "i386" && ${os.major} >= 10 } {

    # fix no-pie clang bug bootstrapping gcc on i386
    # https://trac.macports.org/ticket/63161
    patchfiles-append  patch-gcc10-i686-clang-bootstrap-fix.diff
}

platform darwin {
    configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
}

configure.env-append \
                    AR_FOR_TARGET=${prefix}/bin/ar \
                    AS_FOR_TARGET=${prefix}/bin/as \
                    LD_FOR_TARGET=${prefix}/bin/ld \
                    NM_FOR_TARGET=${prefix}/bin/nm \
                    OBJDUMP_FOR_TARGET=${prefix}/bin/objdump \
                    RANLIB_FOR_TARGET=${prefix}/bin/ranlib \
                    STRIP_FOR_TARGET=${prefix}/bin/strip \
                    OTOOL=${prefix}/bin/otool \
                    OTOOL64=${prefix}/bin/otool

# clang (as) from Xcode 12.5 has various problems with gcc build
if { ${os.platform} eq "darwin" && \
         ([vercmp ${xcodeversion} >= 12.5] || [vercmp ${xcodecltversion} >= 12.5]) } {
    pre-configure {
        ui_warn "Applying '--without-build-config' workaround to Xcode ${xcodeversion} / CLT ${xcodecltversion}"
        ui_warn "If versions > 12.5 please check if it is still required"
    }
    # gcc has build issues on macOS 11.3 with the use of Xcode clang as 'as'
    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100340
    # https://trac.macports.org/ticket/62775
    configure.args-append  --without-build-config
}

# https://trac.macports.org/ticket/65415
# Need to disable bootstrap comparisons here as well
if { ${os.platform} eq "darwin" && ${os.major} < 15 } {
    configure.args-append  --without-build-config
}

# https://trac.macports.org/ticket/58493
compiler.blacklist-append {clang < 800} gcc-4.0 *gcc-4.2 {macports-clang-3.[4-7]}

# https://trac.macports.org/ticket/65415
compiler.blacklist-append {macports-clang-1[2-9]}

# "-stdlib" would be passed on to the bootstrap compiler if present
configure.cxx_stdlib

use_parallel_build  yes

# gcc cannot build if libunwind-headers is active
conflicts_build-append libunwind-headers

# List of dylibs to be installed
# Note that we really don't want to include libgcc_ext.10.[45].dylib here, but install_name_tool
# doesn't know how to change the id of stubs, and it's easier than recreating them for each
# gcc port.
set all_dylibs {libgcc_ext.10.4.dylib libgcc_ext.10.5.dylib libgcc_s.1.dylib libgfortran.5.dylib libquadmath.0.dylib libstdc++.6.dylib libobjc-gnu.4.dylib libgomp.1.dylib libitm.1.dylib libssp.0.dylib libasan.5.dylib libubsan.1.dylib libatomic.1.dylib}
set install_dylibs {libasan.5.dylib libgcc_ext.10.4.dylib libgcc_ext.10.5.dylib}

if {${subport} eq "libgcc9"} {

    # Activate hack for new libgcc
    # https://trac.macports.org/wiki/PortfileRecipes#deactivatehack
    pre-activate {
        if {![catch {set installed [lindex [registry_active libgcc8] 0]}]} {
            # Extract the epoch of the installed libgcc8
            set _epoch [lindex $installed 5]
            # If < 4 need to deactivate
            if {[vercmp $_epoch < 4]} {
                registry_deactivate_composite libgcc8 "" [list ports_nodepcheck 1]
            }
        }
        if {![catch {set installed [lindex [registry_active libgcc-devel] 0]}]} {
            # Extract the epoch of the installed libgcc-devel
            set _epoch [lindex $installed 5]
            # If < 3 need to deactivate
            if {[vercmp $_epoch < 3]} {
                registry_deactivate_composite libgcc-devel "" [list ports_nodepcheck 1]
            }
        }
    }

    # http://trac.macports.org/ticket/35770
    # http://trac.macports.org/ticket/38814
    # While there can be multiple versions of these runtimes in a single
    # process, it is not possible to pass objects between different versions,
    # so we simplify this by having the libgcc port provide the newest version
    # of these runtimes for all versions of gcc to use.
    #
    # If there is a binary incompatible change to the runtime in a future
    # version of gcc, then the latest version of gcc to provide a given ABI
    # version should continue to provide a subport for that and older gcc
    # versions.

    post-destroot {

        # Create temporary lib dir
        file mkdir ${destroot}${prefix}/lib/libgcc.merged

        # Loop over the specific libs provided by this port
        foreach dylib ${install_dylibs} {

            # Different OS versions (e.g. Leopard) or architectures (e.g. PPC) don't produce all the dylibs
            # https://trac.macports.org/ticket/40098
            # https://trac.macports.org/ticket/40100
            if {! [file exists ${destroot}${prefix}/lib/libgcc/${dylib}]} {
                continue
            }

            move ${destroot}${prefix}/lib/libgcc/${dylib} ${destroot}${prefix}/lib/libgcc.merged
            if {[variant_exists universal] && [variant_isset universal]} {
                foreach archdir [glob ${destroot}${prefix}/lib/libgcc/*/] {
                    set archdir_nodestroot [string map "${destroot}/ /" ${archdir}]
                    if {[file exists ${archdir}/${dylib}]} {
                        system "install_name_tool -id ${prefix}/lib/libgcc/${dylib} ${archdir}/${dylib}"
                        foreach link [glob -tails -directory ${archdir} *.dylib] {
                            system "install_name_tool -change ${archdir_nodestroot}${link} ${prefix}/lib/libgcc/${link} ${archdir}/${dylib}"
                        }
                        system "lipo -create -output ${destroot}${prefix}/lib/libgcc.merged/${dylib}~ ${destroot}${prefix}/lib/libgcc.merged/${dylib} ${archdir}/${dylib} && mv ${destroot}${prefix}/lib/libgcc.merged/${dylib}~ ${destroot}${prefix}/lib/libgcc.merged/${dylib}"
                    }
                }
            }

            # strip debug symbols to supress debugger warnings:
            # http://trac.macports.org/attachment/ticket/34831
            if {! [string match *libgcc_ext* ${dylib}]} {
                system "strip -x ${destroot}${prefix}/lib/libgcc.merged/${dylib}"
            }
        }

        # Remove stuff not provided by libgccX ports
        file delete -force ${destroot}${prefix}/bin
        file delete -force ${destroot}${prefix}/share
        file delete -force ${destroot}${prefix}/lib/libgcc
        file delete -force ${destroot}${prefix}/libexec

        # Move temporary lib dir back in place
        move ${destroot}${prefix}/lib/libgcc.merged ${destroot}${prefix}/lib/libgcc

        # Remove includes. Provided by newer libgcc.
        file delete -force ${destroot}${prefix}/include

    }

} else {

    post-destroot {

        file delete ${destroot}${prefix}/share/info/dir

        foreach file [glob ${destroot}${prefix}/share/{info,man/man7}/*] {
            set extension [file extension ${file}]
            set newfile [regsub "${extension}$" ${file} "-mp-${gcc.suffix}${extension}"]
            file rename ${file} ${newfile}
        }

        # Loop over all the dylibs for this compiler here
        foreach dylib ${all_dylibs} {
            # Different OS versions (e.g. Leopard) or architectures (e.g. PPC) don't produce all the dylibs
            # https://trac.macports.org/ticket/40098
            # https://trac.macports.org/ticket/40100
            if {[file exists ${destroot}${prefix}/lib/${name}/${dylib}]} {
                delete ${destroot}${prefix}/lib/${name}/${dylib}
                ln -s ${prefix}/lib/libgcc/${dylib} ${destroot}${prefix}/lib/${name}/${dylib}
            }
            if {[variant_exists universal] && [variant_isset universal]} {
                foreach archdir [glob ${destroot}${prefix}/lib/${name}/*/] {
                    if {[file exists ${archdir}/${dylib}]} {
                        delete ${archdir}/${dylib}
                        ln -s ${prefix}/lib/libgcc/${dylib} ${archdir}/${dylib}
                    }
                }
            }
        }

    }

    select.group        gcc
    select.file         ${filespath}/mp-${name}

}

platform powerpc {
    configure.universal_archs ppc ppc64
}
platform i386 {
    configure.universal_archs i386 x86_64
}
# the generated compiler doesn't accept -arch
configure.env-append \
    "CPP=${configure.cc} -E" \
    "CXXCPP=${configure.cxx} -E"
build.env-append \
    "CPP=${configure.cc} -E" \
    "CXXCPP=${configure.cxx} -E"
configure.cc-append [get_canonical_archflags]
configure.cc_archflags
configure.cxx-append ${configure.cxx_archflags}
configure.cxx_archflags
configure.objc_archflags
configure.ld_archflags
configure.universal_cflags
configure.universal_cxxflags
configure.universal_ldflags
configure.universal_args
