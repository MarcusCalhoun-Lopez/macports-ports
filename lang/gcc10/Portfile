# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem                              1.0
PortGroup           gcc_build           1.0

epoch               7

name                gcc10
version             10.4.0
revision            5

platforms           {darwin >= 10 < 22}

checksums           rmd160  5095b725b8846a4946495f5415aab02c3352d763 \
                    sha256  c9297d5bcd7cb43f3dfc2fed5389e948c9312fd962ef6a4ce455cff963ebe4f1 \
                    size    75018092

set libgccname      lib${name}
subport             ${libgccname} { revision [ expr ${revision} + 0 ] }

set libcxxname      ${name}-libcxx

if { ${os.platform} eq "darwin" } {
    # Patch generated from https://github.com/iains/gcc-10-branch
    # git diff --no-prefix  releases/gcc-10.4.0 gcc-10-4-darwin-pre-r0
    patchfiles-append  patch-darwin-gcc-${version}.diff
    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92061
    patchfiles-append  patch-genconditions.diff
}

platform darwin {
    configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
}

if { ${os.platform} eq "darwin" } {
    # Bootstrap comparison fails on 10.6, so disable
    #   https://trac.macports.org/ticket/65280
    if { (${os.major} <= 10) } \
    {
        # Skip bootstrap comparison entirely
        post-patch {
            reinplace {s|^do-compare =|do-compare = /usr/bin/true|g} \
                ${worksrcpath}/Makefile.in \
                ${worksrcpath}/config/bootstrap-debug.mk \
                ${worksrcpath}/config/bootstrap-debug-lean.mk \
                ${worksrcpath}/config/bootstrap-debug-lib.mk
        }
    }
}

set libcxx_incpath ${prefix}/libexec/${name}/libc++/include/c++/v1

    variant stdlib_flag description {Enable stdlib command line flag to select c++ runtime} {
        # Enables support for specifying the c++ runtime via `-stdlib=` in a similar
        # way to clang. For more details see the later comments in
        #   https://www.mail-archive.com/gcc-patches@gcc.gnu.org/msg257385.html
        # Note : This 'bakes' the libc++ include directory into gcc,
        # which is then used as the default search location when `-stdlib=libc++`
        # is given. Therefore to have consistency across various OS versions, and to enable
        # modern c++ standards, use a recent macports clang port to provide this.
        if {${subport} eq ${name}} {
            depends_run-append port:${libcxxname}
        }
        configure.args-append --with-gxx-libcxx-include-dir="${libcxx_incpath}"
    }

    # libcxx is unavailable on PPC
    if {${build_arch} ni [list ppc ppc64]} {
        default_variants-append +stdlib_flag
    }

# https://trac.macports.org/ticket/29067
# https://trac.macports.org/ticket/29104
# https://trac.macports.org/ticket/47996
# https://trac.macports.org/ticket/58493
compiler.blacklist-append {clang < 800}  gcc-4.0 *gcc-4.2 {macports-clang-3.[4-7]}

# "-stdlib" would be passed on to the bootstrap compiler if present
configure.cxx_stdlib

use_parallel_build  yes

# gcc cannot build if libunwind-headers is active
conflicts_build-append libunwind-headers binutils

# clang (as) from Xcode 12.5 has various problems with gcc build
if { ${os.platform} eq "darwin" && \
         ([vercmp ${xcodeversion} >= 12.5] || [vercmp ${xcodecltversion} >= 12.5]) } {
    pre-configure {
        ui_warn "Applying '--without-build-config' workaround to Xcode ${xcodeversion} / CLT ${xcodecltversion}"
        ui_warn "If versions > 12.5 please check if it is still required"
    }
    # gcc has build issues on macOS 11.3 with the use of Xcode clang as 'as'
    # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100340
    # https://trac.macports.org/ticket/62775
    configure.args-append  --without-build-config
}

if {${subport} eq ${libgccname}} {

    # Activate hack for new libgcc
    # https://trac.macports.org/wiki/PortfileRecipes#deactivatehack
    pre-activate {
        if {![catch {set installed [lindex [registry_active libgcc9] 0]}]} {
            # Extract the epoch of the installed libgcc9
            set _epoch [lindex $installed 5]
            # If < 3 need to deactivate
            if {[vercmp $_epoch < 3]} {
                registry_deactivate_composite libgcc9 "" [list ports_nodepcheck 1]
            }
        }
        if {![catch {set installed [lindex [registry_active libgcc-devel] 0]}]} {
            # Extract the epoch of the installed libgcc-devel
            set _epoch [lindex $installed 5]
            # If < 4 need to deactivate
            if {[vercmp $_epoch < 4]} {
                registry_deactivate_composite libgcc-devel "" [list ports_nodepcheck 1]
            }
        }
    }
}

if {${subport} eq ${name}} {

    select.group        gcc
    select.file         ${filespath}/mp-${name}

}

    platform powerpc {
        configure.universal_archs ppc ppc64
    }
    if { ${os.platform} eq "darwin" && ${os.major} >= 20 } {
        platform i386 {
            configure.universal_archs x86_64 arm64
        }
        platform arm {
            configure.universal_archs x86_64 arm64
        }
    } else {
        platform i386 {
            configure.universal_archs i386 x86_64
        }
    }
    # the generated compiler doesn't accept -arch
    configure.env-append \
        "CPP=${configure.cc} -E" \
        "CPP_FOR_BUILD=${configure.cc} -E" \
        "CXXCPP=${configure.cxx} -E"
    build.env-append \
        "CPP=${configure.cc} -E" \
        "CPP_FOR_BUILD=${configure.cc} -E" \
        "CXXCPP=${configure.cxx} -E"
    configure.cc-append [get_canonical_archflags]
    configure.cc_archflags
    configure.cxx-append ${configure.cxx_archflags}
    configure.cxx_archflags
    configure.objc_archflags
    configure.ld_archflags
    configure.universal_cflags
    configure.universal_cxxflags
    configure.universal_ldflags
    configure.universal_args
