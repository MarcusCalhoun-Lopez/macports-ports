# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem                              1.0
PortGroup           gcc_build           1.0

epoch               2

name                gcc11

version             11.4.0
revision            1

platforms           {darwin >= 10 < 22}

checksums           rmd160  a43fd21a3887af24daa550c4b52fb634e33b633c \
                    sha256  3f2db222b007e8a4a23cd5ba56726ef08e8b1f1eb2055ee72c1402cea73a8dd9 \
                    size    79837032

set libgccname      lib${name}
subport             ${libgccname} { revision [ expr ${revision} + 0 ] }

if { ${os.platform} eq "darwin" } {
    # Patch generated from https://github.com/iains/gcc-11-branch
    # git diff --no-prefix releases/gcc-11.3.0 gcc-11.3-darwin-r2
    patchfiles-append  patch-darwin-gcc-${version}.diff
}

if { ${os.platform} eq "darwin" && ${os.major} >= 17 } {
    # On macOS 10.13 and later, compilation is extremely slow if SIP is
    # disabled; e.g. from ~30m with SIP enabled, to ~6 hours if disabled.
    #
    # This is caused by gcc's build system setting DYLD_LIBRARY_PATH to ensure
    # that the toolchain picks up newly built library versions, which seems to
    # trigger a pathologically slow path in dyld's library resolution.
    #
    # Since dyld ignores DYLD_LIBRARY_PATH when SIP is enabled, the issue is
    # avoided entirely, but at the cost of potentially falling back to incorrect
    # system library paths. The correct, SIP-compatible solution would be gcc
    # adopting @rpath.
    #
    # However, given that SIP is enabled by default in macOS, including on our
    # build bots, we already have to assume that ignoring DYLD_LIBRARY_PATH will
    # still produce a valid toolchain.
    #
    # Given that, we go ahead and disable DYLD_LIBRARY_PATH explicitly, avoiding
    # otherwise unworkably long build-times for hosts with SIP disabled.
    #
    # See also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=84257
    patchfiles-append patch-disable-dyld_library_path.diff
}

set gcc_as ${prefix}/bin/as
set gcc_ld ${prefix}/bin/ld
set gcc_ar ${prefix}/bin/ar
set gcc_nm ${prefix}/bin/nm

if { ${os.platform} eq "darwin" } {
    # gcc has build issues on macOS 11.3 with the use of Xcode 12.5 clang via cctools for ld
    #   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100340
    #   https://trac.macports.org/ticket/62775
    # Bootstrap comparison fails on 10.6, so disable for that case too
    #   https://trac.macports.org/ticket/65149
    # ... also now fails mysteriously on 10.7
    # https://github.com/macports/macports-ports/commit/21bcf9d4ae1feade8f4c53c7608febf8d249cea8#commitcomment-78674560
    if { ([vercmp ${xcodeversion} >= 12.5] && [vercmp ${xcodeversion} < 13]) || \
         ([vercmp ${xcodecltversion} >= 12.5] && [vercmp ${xcodecltversion} < 13]) || \
         (${os.major} <= 11) } \
    {
        # Skip bootstrap comparison entirely
        post-patch {
            reinplace {s|^do-compare =|do-compare = /usr/bin/true|g} \
                ${worksrcpath}/Makefile.in \
                ${worksrcpath}/config/bootstrap-debug.mk \
                ${worksrcpath}/config/bootstrap-debug-lean.mk \
                ${worksrcpath}/config/bootstrap-debug-lib.mk
        }
    }
}

if {${os.platform} eq "darwin" && ${os.major} >= 22} {
    if { [vercmp ${xcodeversion} >= 15.0] || [vercmp ${xcodecltversion} >= 15.0] } {
        # On macOS13 and newer ensure the 'legacy' linker is used as GCC currently has problems
        # with the new default linker in Xcode 15. See e.g.
        # https://developer.apple.com/documentation/xcode-release-notes/xcode-15-release-notes#Linking
        # https://discussions.apple.com/thread/255137447
        # https://developer.apple.com/forums/thread/737707
        # https://github.com/Homebrew/homebrew-core/issues/145991
        gcc.ld      ${prefix}/bin/ld-classic
        # Ensure ld64 is installed with the correct variant need for ld-classic
        require_active_variants ld64 ld64_xcode
    }
}

# https://trac.macports.org/ticket/29067
# https://trac.macports.org/ticket/29104
# https://trac.macports.org/ticket/47996
# https://trac.macports.org/ticket/58493
compiler.blacklist-append {clang < 800} gcc-4.0 *gcc-4.2 {llvm-gcc-4.2 < 2336.1} {macports-clang-3.[4-7]}

# https://build.macports.org/builders/ports-10.13_x86_64-builder/builds/105513/steps/install-port/logs/stdio
# c++/v1/functional:1408:2: error: no member named 'fancy_abort' in namespace 'std::__1'; did you mean simply 'fancy_abort'?
compiler.blacklist-append {clang < 1000}

libgcc.keep libasan.6.dylib
